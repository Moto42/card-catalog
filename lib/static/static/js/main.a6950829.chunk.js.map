{"version":3,"sources":["components/BookAdder/BookAdderForm.js","components/BookAdder/index.js","components/BookAdder/BookAdder.js","components/StackAdder/StackAdderForm.js","components/StackAdder/index.js","components/StackAdder/StackAdder.js","App.js","serviceWorker.js","index.js"],"names":["BookAdderForm","props","react_default","a","createElement","BookAdder","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","prips","console","log","BookAdder_BookAdderForm","adderFunction","Component","StackAdderForm","_this","state","formData","name","building","floor","room","container","containerType","description","containerTypes","formDataUpdater","bind","assertThisInitialized","handleSubmit","event","key","target","id","value","newFormData","objectSpread","setState","payload","JSON","stringify","req","XMLHttpRequest","open","setRequestHeader","send","onChange","type","onClick","React","StackAdder","StackAdder_StackAdderForm","App","className","components_BookAdder","components_StackAdder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6950829.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction BookAdderForm(props){\r\n  return (<div>BookAdderForm Here</div>)\r\n}\r\n\r\nexport default BookAdderForm;\r\n","import BookAdder from './BookAdder';\r\n\r\nexport default BookAdder;\r\n","import React, { Component } from 'react';\r\nimport BookAdderForm from './BookAdderForm';\r\n\r\nclass BookAdder extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n\r\n  adderFunction(prips) {\r\n    console.log(prips)\r\n  }\r\n\r\n  render() {\r\n    return ( <div>\r\n      <BookAdderForm adderFunction={this.adderFunction}/>\r\n\r\n      </div> )\r\n    }\r\n}\r\n\r\n\r\nexport default BookAdder;\r\n","import React from 'react';\r\n\r\nclass StackAdderForm extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      formData : {\r\n        name         : 'Lower Shelf',\r\n        building     : 'home',\r\n        floor        : 'ground',\r\n        room         : 'bedroom',\r\n        container    : 'Black Bookshelf',\r\n        containerType: 'shelf',\r\n        description  : 'Black bookshelf in closet, lower shelf.',\r\n      },\r\n      containerTypes : [],\r\n    };\r\n    this.formDataUpdater = this.formDataUpdater.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  };\r\n\r\n  formDataUpdater(event){\r\n    const key = event.target.id;\r\n    const value = event.target.value;\r\n\r\n    const newFormData = {...this.state.formData};\r\n    newFormData[key]=value;\r\n\r\n    this.setState({formData: newFormData})\r\n  }\r\n\r\n  handleResponse(){\r\n    console.log('HTML Response: 724, This line should be unreachable.')\r\n  }\r\n\r\n  handleSubmit(event){\r\n    const payload = JSON.stringify(this.state.formData);\r\n    const req = new XMLHttpRequest();\r\n    req.open('POST','api/stacks',true);\r\n    req.setRequestHeader('Content-Type','application/json');\r\n    req.send(payload);\r\n  }\r\n\r\n  render(){\r\n    return (<div>\r\n    <form id='BookAdderForm'>\r\n      <label> name         : <input onChange={this.formDataUpdater} value={this.state.formData.name}  type  ='text' id ='name' /></label>\r\n      <label> building     : <input onChange={this.formDataUpdater} value={this.state.formData.building}  type  ='text' id ='building' /></label>\r\n      <label> floor        : <input onChange={this.formDataUpdater} value={this.state.formData.floor}  type  ='text' id ='floor' /></label>\r\n      <label> room         : <input onChange={this.formDataUpdater} value={this.state.formData.room}  type  ='text' id ='room' /></label>\r\n      <label> container    : <input onChange={this.formDataUpdater} value={this.state.formData.container}  type  ='text' id ='container' /></label>\r\n      <label> containerType: <input onChange={this.formDataUpdater} value={this.state.formData.containerType}  type  ='text' id ='containerType' /></label>\r\n      <label> description  : <textarea onChange={this.formDataUpdater} value={this.state.formData.description}  id ='description' /></label>\r\n      <button type='button' onClick={this.handleSubmit}>submit</button>\r\n    </form>\r\n    <div>\r\n\r\n    </div>\r\n    </div>)\r\n  }\r\n}\r\n\r\nexport default StackAdderForm;\r\n","import StackAdder from './StackAdder'\r\n\r\nexport default StackAdder;\r\n","import React, { Component } from 'react';\r\nimport StackAdderForm from './StackAdderForm';\r\n\r\nclass StackAdder extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n\r\n  adderFunction(prips) {\r\n    console.log(prips)\r\n  }\r\n\r\n  render() {\r\n    return ( <div>\r\n      <StackAdderForm adderFunction={this.adderFunction}/>\r\n\r\n      </div> )\r\n    }\r\n}\r\n\r\nexport default StackAdder;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport BookAdder from './components/BookAdder';\nimport StackAdder from './components/StackAdder';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BookAdder />\n        <StackAdder />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}